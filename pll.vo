//IP Functional Simulation Model
//VERSION_BEGIN 10.1SP1 cbx_mgl 2011:01:19:21:15:40:SJ cbx_simgen 2011:01:19:21:13:40:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 1991-2011 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Altera disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = cycloneive_pll 1 lut 2 
`timescale 1 ps / 1 ps
module  pll
	( 
	address,
	c0,
	c1,
	c2,
	c3,
	clk,
	locked,
	phasedone,
	read,
	readdata,
	reset,
	write,
	writedata) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  address;
	output   c0;
	output   c1;
	output   c2;
	output   c3;
	input   clk;
	output   locked;
	output   phasedone;
	input   read;
	output   [31:0]  readdata;
	input   reset;
	input   write;
	input   [31:0]  writedata;

	wire  [4:0]   wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk;
	wire  wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_fbout;
	reg	pll_pfdena_reg_6q;
	reg	pll_prev_reset_4q;
	wire  s_wire_pll_w_select_control_17_dataout;
	wire  s_wire_pll_wire_pfdena_reg_ena_15_dataout;
	wire  s_wire_vcc;

	cycloneive_pll   pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138
	( 
	.activeclock(),
	.clk(wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk),
	.clkbad(),
	.fbin(wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_fbout),
	.fbout(wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_fbout),
	.inclk({1'b0, clk}),
	.locked(),
	.phasedone(),
	.scandataout(),
	.scandone(),
	.vcooverrange(),
	.vcounderrange(),
	.areset(),
	.clkswitch(),
	.configupdate(),
	.pfdena(),
	.phasecounterselect(),
	.phasestep(),
	.phaseupdown(),
	.scanclk(),
	.scanclkena(),
	.scandata()
	);
	defparam
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.bandwidth_type = "auto",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk0_divide_by = 1,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk0_duty_cycle = 50,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk0_multiply_by = 2,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk0_phase_shift = "-1806",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk1_divide_by = 3,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk1_duty_cycle = 50,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk1_multiply_by = 2,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk1_phase_shift = "0",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk2_divide_by = 1,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk2_duty_cycle = 50,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk2_multiply_by = 2,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk2_phase_shift = "0",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk3_divide_by = 5,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk3_duty_cycle = 50,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk3_multiply_by = 8,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.clk3_phase_shift = "0",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.compensate_clock = "clk0",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.inclk0_input_frequency = 20000,
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.lpm_type = "cycloneive_pll",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.operation_mode = "normal",
		pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138.pll_type = "auto";
	initial
	begin
		pll_pfdena_reg_6q = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			pll_pfdena_reg_6q <= 1;
		end
		else if  (s_wire_pll_wire_pfdena_reg_ena_15_dataout == 1'b1) 
		begin
			pll_pfdena_reg_6q <= writedata[1];
		end
	end
	event pll_pfdena_reg_6q_event;
	initial
		#1 ->pll_pfdena_reg_6q_event;
	always @(pll_pfdena_reg_6q_event)
		pll_pfdena_reg_6q <= 1;
	initial
	begin
		pll_prev_reset_4q = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			pll_prev_reset_4q <= 0;
		end
		else 
		begin
			pll_prev_reset_4q <= (s_wire_pll_wire_pfdena_reg_ena_15_dataout & writedata[0]);
		end
	end
	assign
		c0 = wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk[0],
		c1 = wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk[1],
		c2 = wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk[2],
		c3 = wire_pll_pll_altpll_7km2_sd1_cycloneive_pll_pll7_138_clk[3],
		locked = 1'b0,
		phasedone = 1'b0,
		readdata = {{30{1'b0}}, (((pll_pfdena_reg_6q & s_wire_pll_w_select_control_17_dataout) | ((~ address[0]) & (~ address[1]))) & read), ((pll_prev_reset_4q & s_wire_pll_w_select_control_17_dataout) & read)},
		s_wire_pll_w_select_control_17_dataout = (address[0] & (~ address[1])),
		s_wire_pll_wire_pfdena_reg_ena_15_dataout = (s_wire_pll_w_select_control_17_dataout & write),
		s_wire_vcc = 1'b1;
endmodule //pll
//synopsys translate_on
//VALID FILE
